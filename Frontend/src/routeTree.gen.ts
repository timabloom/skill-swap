/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoImport } from './routes/logo'

// Create Virtual Routes

const ProfileLazyImport = createFileRoute('/profile')()
const MatchesLazyImport = createFileRoute('/matches')()
const CreateProfileLazyImport = createFileRoute('/create-profile')()
const ConnectionsLazyImport = createFileRoute('/connections')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ProfileLazyRoute = ProfileLazyImport.update({
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))

const MatchesLazyRoute = MatchesLazyImport.update({
  path: '/matches',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/matches.lazy').then((d) => d.Route))

const CreateProfileLazyRoute = CreateProfileLazyImport.update({
  path: '/create-profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/create-profile.lazy').then((d) => d.Route),
)

const ConnectionsLazyRoute = ConnectionsLazyImport.update({
  path: '/connections',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/connections.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const LogoRoute = LogoImport.update({
  path: '/logo',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/logo': {
      id: '/logo'
      path: '/logo'
      fullPath: '/logo'
      preLoaderRoute: typeof LogoImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/connections': {
      id: '/connections'
      path: '/connections'
      fullPath: '/connections'
      preLoaderRoute: typeof ConnectionsLazyImport
      parentRoute: typeof rootRoute
    }
    '/create-profile': {
      id: '/create-profile'
      path: '/create-profile'
      fullPath: '/create-profile'
      preLoaderRoute: typeof CreateProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/matches': {
      id: '/matches'
      path: '/matches'
      fullPath: '/matches'
      preLoaderRoute: typeof MatchesLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/logo': typeof LogoRoute
  '/about': typeof AboutLazyRoute
  '/connections': typeof ConnectionsLazyRoute
  '/create-profile': typeof CreateProfileLazyRoute
  '/matches': typeof MatchesLazyRoute
  '/profile': typeof ProfileLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/logo': typeof LogoRoute
  '/about': typeof AboutLazyRoute
  '/connections': typeof ConnectionsLazyRoute
  '/create-profile': typeof CreateProfileLazyRoute
  '/matches': typeof MatchesLazyRoute
  '/profile': typeof ProfileLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/logo': typeof LogoRoute
  '/about': typeof AboutLazyRoute
  '/connections': typeof ConnectionsLazyRoute
  '/create-profile': typeof CreateProfileLazyRoute
  '/matches': typeof MatchesLazyRoute
  '/profile': typeof ProfileLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/logo'
    | '/about'
    | '/connections'
    | '/create-profile'
    | '/matches'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/logo'
    | '/about'
    | '/connections'
    | '/create-profile'
    | '/matches'
    | '/profile'
  id:
    | '__root__'
    | '/'
    | '/logo'
    | '/about'
    | '/connections'
    | '/create-profile'
    | '/matches'
    | '/profile'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LogoRoute: typeof LogoRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ConnectionsLazyRoute: typeof ConnectionsLazyRoute
  CreateProfileLazyRoute: typeof CreateProfileLazyRoute
  MatchesLazyRoute: typeof MatchesLazyRoute
  ProfileLazyRoute: typeof ProfileLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LogoRoute: LogoRoute,
  AboutLazyRoute: AboutLazyRoute,
  ConnectionsLazyRoute: ConnectionsLazyRoute,
  CreateProfileLazyRoute: CreateProfileLazyRoute,
  MatchesLazyRoute: MatchesLazyRoute,
  ProfileLazyRoute: ProfileLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/logo",
        "/about",
        "/connections",
        "/create-profile",
        "/matches",
        "/profile"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/logo": {
      "filePath": "logo.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/connections": {
      "filePath": "connections.lazy.tsx"
    },
    "/create-profile": {
      "filePath": "create-profile.lazy.tsx"
    },
    "/matches": {
      "filePath": "matches.lazy.tsx"
    },
    "/profile": {
      "filePath": "profile.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
